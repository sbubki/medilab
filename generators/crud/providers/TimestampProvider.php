<?php

namespace app\generators\crud\providers;

class TimestampProvider extends \schmunk42\giiant\base\Provider
{
    public function prependActiveField($attribute)
    {
        if (isset($this->generator->getTableSchema()->columns[$attribute]) == FALSE) {
            return;
        }

        $column = $this->generator->getTableSchema()->columns[$attribute];

        if ($column->type !== 'integer' OR substr($column->name, -3) !== '_at') {
            return;
        }

        $method = __METHOD__;
        return <<<EOS
<?php
// generated by {$method}
\$tz = new \DateTimeZone(Yii::\$app->timeZone);
if (is_numeric(\$model->{$column->name})){
    \${$column->name}_dto = new \DateTime('@'.\$model->{$column->name});
    \${$column->name}_dto->setTimezone(\$tz);
} else {
    \${$column->name}_dto = new \DateTime(\$model->{$column->name}, \$tz);
}
if (!\${$column->name}_dto){
    \${$column->name}_dto = new \DateTime('now', \$tz);
}

\$model->{$column->name} = \${$column->name}_dto->format('Y-m-d H:i:s');
?>
EOS;
    }
    public function activeField($attribute)
    {
        if (isset($this->generator->getTableSchema()->columns[$attribute]) == FALSE) {
            return;
        }

        $column = $this->generator->getTableSchema()->columns[$attribute];

        if ($column->type !== 'integer' OR substr($column->name, -3) !== '_at') {
            return;
        }

        $method = __METHOD__;
        return <<<EOS

// generated by {$method}
    \$form
    ->field(\$model, '{$column->name}')
    ->widget(
        \kartik\widgets\DateTimePicker::class, [
        'name' => '{$column->name}',
        'class' => 'form-control',
        'autoDefaultTimezone' => FALSE,
        'pluginOptions' => [
            'autoclose' => true,
            'format' => 'yyyy-mm-dd hh:ii:ss',
            'timezone' => Yii::\$app->timeZone,
        ],
        ]
)
;

EOS;
    }

    /**
     * Formatter for detail view attributes, who have get[..]ValueLabel function.
     *
     * @param $attribute ColumnSchema
     * @param $model ActiveRecord
     *
     * @return null|string
     */
    public function attributeFormat($attribute)
    {
        if (isset($this->generator->getTableSchema()->columns[$attribute]) == FALSE) {
            return;
        }

        $column = $this->generator->getTableSchema()->columns[$attribute];

        if ($column->type !== 'integer' OR substr($column->name, -3) !== '_at') {
            return;
        }

        return <<<EOS

[
    'attribute' => '{$attribute}',
    'format' => [
        'datetime',
        'format' => 'eee, d MMM Y, H:m',
    ],
]
EOS;
    }

    public function columnFormat($attribute, $model)
    {
        if (isset($this->generator->getTableSchema()->columns[$attribute]) == FALSE) {
            return;
        }

        $column = $this->generator->getTableSchema()->columns[$attribute];

        if ($column->type !== 'integer' OR substr($column->name, -3) !== '_at') {
            return;
        }

        return <<<EOS

[
    'attribute' => '{$attribute}',
    'format' => [
        'datetime',
        'format' => 'eee, d MMM Y, H:m',
    ],
]
EOS;
    }
}